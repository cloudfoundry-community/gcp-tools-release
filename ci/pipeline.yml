#
# Copyright 2019 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---

resource_types:
  - name: bbl-state-resource
    type: docker-image
    source:
      repository: cfinfrastructure/bbl-state-resource
  - name: bosh-deployment
    type: docker-image
    source:
      repository: cloudfoundry/bosh-deployment-resource
  - name: gcs-resource
    type: docker-image
    source:
      repository: frodenas/gcs-resource

resources:
  - name: bbl-state # BOSH Director resource. Represents the state of BOSH.
    type: bbl-state-resource
    source:
      bucket: ((bbl_state_bucket))
      iaas: gcp
      lb_type: cf
      lb_domain: ((domain_name))
      gcp_region: ((gcp_region))
      gcp_service_account_key: ((service_account_key_json))
  - name: cf # BOSH deployment for Cloud Foundry.
    type: bosh-deployment
    source:
      deployment: cf
      source_file: bbl-state/bdr-source-file
  - name: stackdriver-tools-release # BOSH deployment for the Stackdriver Nozzle
    type: bosh-deployment
    source:
      deployment: stackdriver-nozzle
      source_file: bbl-state/bdr-source-file
  - name: cf-deployment-source # Source code for The Cloud Foundry BOSH deployment. Contains the deploy manifest and the BOSH releases.
    type: git
    source:
      uri: https://github.com/cloudfoundry/cf-deployment.git
      branch: master
  - name: gcp-xenial-stemcells # stemcell used by BOSH deployments.
    type: bosh-io-stemcell
    source:
      name: bosh-google-kvm-ubuntu-xenial-go_agent
  - name: stackdriver-tools-source # stackdriver-tools source code.
    type: git
    source:
      uri: ((stackdriver_tools_uri))
      branch: ((stackdriver_tools_branch))
      ignore_paths:
        - .final_builds/**/*.yml
        - releases/**/*.yml
  - name: stackdriver-tools-source-ci # stackdriver-tools source code.
    type: git
    source:
      uri: ((stackdriver_tools_ci_uri))
      branch: ((stackdriver_tools_ci_branch))
      ignore_paths:
        - .final_builds/**/*.yml
        - releases/**/*.yml
  - name: stackdriver-tools-artifacts # stackdriver-tools' bosh releases.
    type: gcs-resource
    source:
      json_key: ((service_account_key_json))
      bucket: ((pipeline_artifacts_bucket))
      regexp: beta/stackdriver-tools/stackdriver-tools-release-.*.tar.gz
  - name: stackdriver-tools-artifacts-sha256 # stackdriver-tools' bosh releases' sha256 hashes.
    type: gcs-resource
    source:
      json_key: ((service_account_key_json))
      bucket: ((pipeline_artifacts_bucket))
      regexp: beta/stackdriver-tools/stackdriver-tools-release-.*.tar.gz.sha256
  - name: stackdriver-nozzle-tile # stackdriver-tools' tiles.
    type: gcs-resource
    source:
      json_key: ((service_account_key_json))
      bucket: ((pipeline_artifacts_bucket))
      regexp: beta/stackdriver-tools/stackdriver-nozzle-.*.pivotal
  - name: stackdriver-nozzle-tile-sha256 # stackdriver-tools' bosh tiles' sha256 hashes.
    type: gcs-resource
    source:
      json_key: ((service_account_key_json))
      bucket: ((pipeline_artifacts_bucket))
      regexp: beta/stackdriver-tools/stackdriver-nozzle-.*.pivotal.sha256
  - name: stackdriver-spinner # Stackdriver Spinner CF deployment.
    type: cf
    source:
      api: ((cf_api_endpoint))
      username: ((cf_username))
      password: ((cf_password))
      organization: ((spinner_org))
      space: ((spinner_space))
      skip_cert_check: ((skip_ssl))
  - name: example-app # Stackdriver tools example CF app.
    type: cf
    source:
      api: ((cf_api_endpoint))
      username: ((cf_username))
      password: ((cf_password))
      organization: ((example_app_org))
      space: ((example_app_space))
      skip_cert_check: ((skip_ssl))

jobs:
  # BOSH/CF Deploy Pipeline
  - name: cf-up
    serial: true
    plan:
      - get: stackdriver-tools-source-ci
      # Write load balancer certs/key to files for bbl
      - task: write-cert
        file: stackdriver-tools-source-ci/ci/tasks/echo-to-file.yml
        params:
          TEXT: ((load_balancer_cert))
          FILE: "directory/cert.pem"
        output_mapping:
          directory: lb_cert
      - task: write-key
        file: stackdriver-tools-source-ci/ci/tasks/echo-to-file.yml
        params:
          TEXT: ((load_balancer_key))
          FILE: "directory/key.pem"
        output_mapping:
          directory: lb_key
      # Deploys the BOSH director via `bbl up`
      - put: bbl-state
        params:
          command: up
          name: ((bbl_env_name))
          args:
            lb-cert: /tmp/build/put/lb_cert/cert.pem
            lb-key: /tmp/build/put/lb_key/key.pem
      - get: stackdriver-tools-source
        attempts: 2
      # Update runtime config to add BOSH DNS
      - task: update-runtime-config
        file: stackdriver-tools-source-ci/ci/tasks/update-runtime-config.yml
      # Gets the CF deployment source (manifest/releases/operations)
      - get: cf-deployment-source
      # Gets the latest ubuntu stemcell
      - get: gcp-xenial-stemcells
      # Patches the deployment manifest to use the stemcell provided by the previous step.
      - task: update-manifest
        file: stackdriver-tools-source-ci/ci/tasks/update-manifest.yml
      # Performs a BOSH deploy to deploy Cloud Foundry on the BOSH director
      - put: cf
        params:
          source_file: bbl-state/bdr-source-file
          manifest: edited-manifest/cf-deployment.yml
          stemcells:
            - gcp-xenial-stemcells/stemcell.tgz
          vars:
            enable_ssl: false
            system_domain: ((domain_name))
          ops_files:
            - cf-deployment-source/operations/scale-to-one-az.yml
            - cf-deployment-source/operations/use-compiled-releases.yml
  # Stackdriver-tools CI/CD
  - name: unit-test
    plan:
      - get: stackdriver-tools-source-ci
      - get: stackdriver-tools-source
        attempts: 2
        trigger: true
      - task: unit-test
        file: stackdriver-tools-source-ci/ci/tasks/unit-test.yml
  - name: build-tile
    serial: true
    plan:
      - get: stackdriver-tools-source-ci
      - get: stackdriver-tools-source
        attempts: 2
        trigger: true
        passed: [unit-test]
      - task: tile
        file: stackdriver-tools-source-ci/ci/tasks/build-tile.yml
        params:
          CUSTOM_TILE_QUALIFIER: custom # Makefilt fix, since concourse only checks out a commit and not a branch
      - put: stackdriver-nozzle-tile
        params: {file: tile-out/*.pivotal}
      - put: stackdriver-nozzle-tile-sha256
        params: {file: tile-out/*.pivotal.sha256}
  - name: build-bosh-release
    serial: true
    plan:
      - get: stackdriver-tools-source-ci
      - get: stackdriver-tools-source
        attempts: 2
        trigger: true
        passed: [unit-test]
      - task: bosh-release
        file: stackdriver-tools-source-ci/ci/tasks/build-bosh-release.yml
      - put: stackdriver-tools-artifacts
        params: {file: bosh-release-out/stackdriver-tools-release-*.tar.gz}
      - put: stackdriver-tools-artifacts-sha256
        params: {file: bosh-release-out/stackdriver-tools-release-*.tar.gz.sha256}
  - name: deploy-bosh-release
    serial: true
    plan:
      - get: stackdriver-tools-source-ci
      - get: bbl-state
        trigger: true
        passed: [cf-up]
      - get: stackdriver-tools-source
        attempts: 2
        trigger: true
        passed: [build-bosh-release]
      - get: gcp-xenial-stemcells
      - get: stackdriver-tools-artifacts
        trigger: true
        passed: [build-bosh-release]
      - put: stackdriver-tools-release
        params:
          source_file: bbl-state/bdr-source-file
          manifest: stackdriver-tools-source/manifests/stackdriver-tools.yml
          stemcells:
            - gcp-xenial-stemcells/stemcell.tgz
          releases:
            - stackdriver-tools-artifacts/stackdriver*
          vars:
            firehose_endpoint: ((cf_api_endpoint))
            firehose_username: ((cf_username))
            firehose_password: ((cf_password))
            skip_ssl: ((skip_ssl))
            gcp_project_id: ((gcp_project_id))
            gcp_service_account_json: ((service_account_key_json))
  # Deploy Spinner app
  - name: deploy-stackdriver-spinner
    serial: true
    plan:
      - get: stackdriver-tools-source-ci
      - get: stackdriver-tools-source
        attempts: 2
        trigger: true
        passed: [deploy-bosh-release]
      - task: write-cert
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: alpine
          params:
            GOOGLE_APPLICATION_CREDENTIALS: ((service_account_key_json))
          run:
            path: sh
            args: ["-c", "cp -R stackdriver-tools-source/* source_with_creds/ && echo \"${GOOGLE_APPLICATION_CREDENTIALS}\" > source_with_creds/src/stackdriver-spinner/credentials.json"]
          inputs:
            - name: stackdriver-tools-source
          outputs:
            - name: source_with_creds
      - put: stackdriver-spinner
        params:
          path: source_with_creds/src/stackdriver-spinner/
          manifest: source_with_creds/src/stackdriver-spinner/manifest.yml
          environment_variables:
            GOOGLE_APPLICATION_CREDENTIALS: credentials.json
            GCP_PROJECT: ((gcp_project_id))
  # Deploy example app
  - name: deploy-example-app
    serial: true
    plan:
      - get: stackdriver-tools-source-ci
      - get: stackdriver-tools-source
        attempts: 2
        trigger: true
        passed: [deploy-bosh-release]
      - task: prep-example-app
        file: stackdriver-tools-source-ci/ci/tasks/prep-example-app.yml
        params:
          GCP_PROJECT: ((gcp_project_id))
          GOOGLE_PROJECT: ((gcp_project_id))
          GOOGLE_APPLICATION_CREDENTIALS: ((service_account_key_json))
          STACKDRIVER_TOOLS_SOURCE_URI: ((stackdriver_tools_uri))
      - put: example-app
        params:
          path: prepped_source/examples/cf-stackdriver-example/
          manifest: prepped_source/examples/cf-stackdriver-example/manifest.yml
          environment_variables:
            GOOGLE_APPLICATION_CREDENTIALS: credentials.json
            GCP_PROJECT: ((gcp_project_id))
            GOOGLE_PROJECT: ((gcp_project_id))
